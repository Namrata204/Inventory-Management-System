package com.inventory.management.service;


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.inventory.management.dto.ProductDto;
import com.inventory.management.repository.ProductRepository;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ProductServiceImplTest {
    @Mock
    private ProductRepository productRepository;

    @InjectMocks
    private ProductServiceImpl productService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void createProduct_ValidProductDto_ReturnsCreatedProductDto() {
        // Arrange
        ProductDto productDto = new ProductDto();
        productDto.setName("Test Product");
        productDto.setDescription("Test Description");
        productDto.setPrice(10.0);
        productDto.setQuantity(100);

        Product product = new Product();
        product.setId(1L);
        product.setName(productDto.getName());
        product.setDescription(productDto.getDescription());
        product.setPrice(productDto.getPrice());
        product.setQuantity(productDto.getQuantity());

        when(productRepository.findByName(productDto.getName())).thenReturn(Optional.empty());
        when(productRepository.save(any(Product.class))).thenReturn(product);

        // Act
        ProductDto createdProductDto = productService.createProduct(productDto);

        // Assert
        assertNotNull(createdProductDto);
        assertEquals(product.getId(), createdProductDto.getId());
        assertEquals(product.getName(), createdProductDto.getName());
        assertEquals(product.getDescription(), createdProductDto.getDescription());
        assertEquals(product.getPrice(), createdProductDto.getPrice());
        assertEquals(product.getQuantity(), createdProductDto.getQuantity());

        verify(productRepository, times(1)).findByName(productDto.getName());
        verify(productRepository, times(1)).save(any(Product.class));
    }

    @Test
    void createProduct_DuplicateProductName_ThrowsDuplicateProductException() {
        // Arrange
        ProductDto productDto = new ProductDto();
        productDto.setName("Test Product");
        productDto.setDescription("Test Description");
        productDto.setPrice(10.0);
        productDto.setQuantity(100);

        when(productRepository.findByName(productDto.getName())).thenReturn(Optional.of(new Product()));

        // Act & Assert
        assertThrows(DuplicateProductException.class, () -> productService.createProduct(productDto));

        verify(productRepository, times(1)).findByName(productDto.getName());
        verify(productRepository, never()).save(any(Product.class));
    }

    // Write similar test methods for other methods in the ProductServiceImpl class

    // ...
}



