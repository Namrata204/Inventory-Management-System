package com.inventory.management.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.inventory.management.dto.OrderDto;
import com.inventory.management.dto.ProductDto;
import com.inventory.management.exception.InsufficientStockException;
import com.inventory.management.exception.OrderNotFoundException;
import com.inventory.management.exception.OrderServiceException;
import com.inventory.management.exception.ProductNotFoundException;
import com.inventory.management.model.Order;
import com.inventory.management.repository.OrderRepository;

@Service
public class OrderServiceImpl implements OrderService {
    private final OrderRepository orderRepository;
    private final RestTemplate restTemplate;
    private final String productServiceUrl = "http://localhost:8080/api/products/byname";

    @Autowired
    public OrderServiceImpl(OrderRepository orderRepository, RestTemplate restTemplate) {
        this.orderRepository = orderRepository;
        this.restTemplate = restTemplate;
    }

    /**
     * Create a new order.
     *
     * @param orderDto The order data.
     * @return The created order as an OrderDto.
     */
    public OrderDto createOrder(OrderDto orderDto) {
        try {
            Map<String, Integer> productQuantities = orderDto.getProductQuantities();
            int totalQuantity = 0;

            // Retrieve product details from the Product Service for each product name
            List<ProductDto> productDtos = new ArrayList<>();
            for (Map.Entry<String, Integer> entry : productQuantities.entrySet()) {
                String productName = entry.getKey();
                int orderQuantity = entry.getValue();

                ResponseEntity<ProductDto> response = restTemplate.getForEntity(
                        productServiceUrl + "/" + productName,
                        ProductDto.class);

                if (response.getStatusCode() == HttpStatus.NOT_FOUND) {
                    throw new ProductNotFoundException("Product not found with name: " + productName);
                }

                ProductDto productDto = response.getBody();

                if (productDto == null) {
                    throw new ProductNotFoundException("Product not found with name: " + productName);
                }

                // Perform inventory check
                if (productDto.getQuantity() < orderQuantity) {
                    throw new InsufficientStockException("Insufficient stock for the product: " + productDto.getName());
                }

                totalQuantity += orderQuantity;
                productDtos.add(productDto);
            }

            // Update stock levels in the Product Service for each product
            for (ProductDto productDto : productDtos) {
                int orderQuantity = productQuantities.get(productDto.getName());
                restTemplate.put(
                        productServiceUrl + "/" + productDto.getName() + "/update-stock?quantity=" + orderQuantity,
                        null);
            }

            // Create the order
            Order order = convertToOrder(orderDto);
            order.setTotalQuantity(totalQuantity); // Set the total quantity
            Order createdOrder = orderRepository.save(order);
            return convertToOrderDto(createdOrder);
        } catch (RestClientException ex) {
            // Handle RestClientException (e.g., network issues, invalid response format, timeouts)
            throw new OrderServiceException("Error communicating with the Product Service", ex);
        }
    }



    /**
     * Get an order by ID.
     *
     * @param orderId The ID of the order.
     * @return The order as an OrderDto if found,
     *         or null if the order does not exist.
     */
    public OrderDto getOrderById(Long orderId) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            return convertToOrderDto(order);
        }
        throw new OrderNotFoundException("Order not found with ID: " + orderId);
    }

    /**
     * Update the status of an order.
     *
     * @param orderId The ID of the order.
     * @param status  The new status of the order.
     * @return The updated order as an OrderDto if successful,
     *         or null if the order does not exist.
     */
    public OrderDto updateOrderStatus(Long orderId, String status) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            order.setStatus(status);
            Order updatedOrder = orderRepository.save(order);
            return convertToOrderDto(updatedOrder);
        }
        throw new OrderNotFoundException("Order not found with ID: " + orderId);
    }

    /**
     * Generate an invoice for an order.
     *
     * @param orderId The ID of the order.
     * @return The invoice file as a byte array if successful,
     *         or null if the order does not exist.
     */
    public byte[] generateInvoice(Long orderId) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            // Generate the invoice logic here
            return null; // Placeholder for invoice generation logic
        }
        return null;
    }

    /**
     * Converts an Order entity to an OrderDto.
     *
     * @param order The Order entity to convert.
     * @return The corresponding OrderDto.
     */
    private OrderDto convertToOrderDto(Order order) {
        OrderDto orderDto = new OrderDto();
        orderDto.setId(order.getId());
        orderDto.setProductQuantities(order.getProductQuantities());
        orderDto.setStatus(order.getStatus());
        return orderDto;
    }
    
    private Order convertToOrder(OrderDto orderDto) {
        Order order = new Order();
        order.setId(orderDto.getId());
        order.setProductQuantities(orderDto.getProductQuantities());
        order.setStatus(orderDto.getStatus());
        return order;
    }
}
