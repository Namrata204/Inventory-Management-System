package com.inventory.management.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.inventory.management.model.Product;
import com.inventory.management.repository.ProductRepository;

import java.util.List;
import java.util.Optional;

/**
 * Implementation of the ProductService interface.
 * Provides methods for managing products.
 */
@Service
public class ProductServiceImpl implements ProductService {
    private final ProductRepository productRepository;

    @Autowired
    public ProductServiceImpl(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    /**
     * Creates a new product.
     *
     * @param productDTO The ProductDTO object representing the product to create.
     * @return The created product as a ProductDTO.
     */
    @Override
    public ProductDTO createProduct(ProductDTO productDTO) {
        Product product = convertToProduct(productDTO);
        Product createdProduct = productRepository.save(product);
        return convertToProductDTO(createdProduct);
    }

    /**
     * Updates an existing product.
     *
     * @param productId  The ID of the product to update.
     * @param productDTO The ProductDTO object representing the updated product data.
     * @return The updated product as a ProductDTO if successful,
     *         or null if the product does not exist.
     */
    @Override
    public ProductDTO updateProduct(Long productId, ProductDTO productDTO) {
        Optional<Product> optionalProduct = productRepository.findById(productId);
        if (optionalProduct.isPresent()) {
            Product existingProduct = optionalProduct.get();
            // Update existingProduct with data from productDTO
            existingProduct.setName(productDTO.getName());
            existingProduct.setDescription(productDTO.getDescription());
            existingProduct.setPrice(productDTO.getPrice());
            existingProduct.setQuantity(productDTO.getQuantity());
            Product updatedProduct = productRepository.save(existingProduct);
            return convertToProductDTO(updatedProduct);
        }
        return null;
    }

    /**
     * Deletes a product.
     *
     * @param productId The ID of the product to delete.
     */
    @Override
    public void deleteProduct(Long productId) {
        productRepository.deleteById(productId);
    }

    /**
     * Retrieves a product by its ID.
     *
     * @param productId The ID of the product to retrieve.
     * @return The product as a ProductDTO if found,
     *         or null if the product does not exist.
     */
    @Override
    public ProductDTO getProductById(Long productId) {
        Optional<Product> optionalProduct = productRepository.findById(productId);
        if (optionalProduct.isPresent()) {
            Product product = optionalProduct.get();
            return convertToProductDTO(product);
        }
        return null;
    }

    /**
     * Retrieves all products.
     *
     * @return A list of all products as ProductDTOs.
     */
    @Override
    public List<ProductDTO> getAllProducts() {
        List<Product> products = productRepository.findAll();
        return products.stream()
                .map(this::convertToProductDTO)
                .collect(Collectors.toList());
    }

    /**
     * Converts a ProductDTO to a Product entity.
     *
     * @param productDTO The ProductDTO to convert.
     * @return The corresponding Product entity.
     */
    private Product convertToProduct(ProductDTO productDTO) {
        Product product = new Product();
        product.setId(productDTO.getId());
        product.setName(productDTO.getName());
        product.setDescription(productDTO.getDescription());
        product.setPrice(productDTO.getPrice());
        product.setQuantity(productDTO.getQuantity());
        return product;
    }

    /**
     * Converts a Product entity to a ProductDTO.
     *
     * @param product The Product entity to convert.
     * @return The corresponding ProductDTO.
     */
    private ProductDTO convertToProductDTO(Product product) {
        ProductDTO productDTO = new ProductDTO();
        productDTO.setId(product.getId());
        productDTO.setName(product.getName());
        productDTO.setDescription(product.getDescription());
        productDTO.setPrice(product.getPrice());
        productDTO.setQuantity(product.getQuantity());
        return productDTO;
    }
}