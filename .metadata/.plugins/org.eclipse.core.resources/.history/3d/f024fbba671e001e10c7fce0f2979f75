package com.inventory.management.service;

@Service
public class OrderServiceImpl {
    private final OrderRepository orderRepository;
    private final ProductService productService;

    @Autowired
    public OrderService(OrderRepository orderRepository, ProductService productService) {
        this.orderRepository = orderRepository;
        this.productService = productService;
    }

    /**
     * Create a new order.
     *
     * @param orderDto The order data.
     * @return The created order as an OrderDto.
     */
    public OrderDto createOrder(OrderDto orderDto) {
        // Check if the product exists and retrieve its details
        ProductDto productDto = productService.getProductById(orderDto.getProductId());
        if (productDto == null) {
            throw new ProductNotFoundException("Product not found with ID: " + orderDto.getProductId());
        }

        // Perform inventory check
        if (productDto.getQuantity() < orderDto.getQuantity()) {
            throw new InsufficientStockException("Insufficient stock for the product: " + productDto.getName());
        }

        // Update stock levels
        productService.updateStock(orderDto.getProductId(), orderDto.getQuantity());

        // Create the order
        Order order = new Order();
        order.setProductId(orderDto.getProductId());
        order.setQuantity(orderDto.getQuantity());
        // Set other order details

        Order createdOrder = orderRepository.save(order);
        return convertToOrderDto(createdOrder);
    }

    /**
     * Get an order by ID.
     *
     * @param orderId The ID of the order.
     * @return The order as an OrderDto if found,
     *         or null if the order does not exist.
     */
    public OrderDto getOrderById(Long orderId) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            return convertToOrderDto(order);
        }
        return null;
    }

    /**
     * Update the status of an order.
     *
     * @param orderId The ID of the order.
     * @param status  The new status of the order.
     * @return The updated order as an OrderDto if successful,
     *         or null if the order does not exist.
     */
    public OrderDto updateOrderStatus(Long orderId, String status) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            order.setStatus(status);
            Order updatedOrder = orderRepository.save(order);
            return convertToOrderDto(updatedOrder);
        }
        return null;
    }

    /**
     * Generate an invoice for an order.
     *
     * @param orderId The ID of the order.
     * @return The invoice file as a byte array if successful,
     *         or null if the order does not exist.
     */
    public byte[] generateInvoice(Long orderId) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            // Generate the invoice logic here
            return null; // Placeholder for invoice generation logic
        }
        return null;
    }

    private OrderDto convertToOrderDto(Order order) {
        OrderDto orderDto = new OrderDto();
        orderDto.setId(order.getId());
        orderDto.setProductId(order.getProductId());
        orderDto.setQuantity(order.getQuantity());
        // Set other order details
        return orderDto;
    }
}

